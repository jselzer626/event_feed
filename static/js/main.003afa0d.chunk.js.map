{"version":3,"sources":["images/English.png","images/Math.png","images/Science.png","App.js","index.js"],"names":["module","exports","App","testSubjects","years","categories","useState","displayChunk","sampleData","allTests","currentTest","setCurrentTest","selectedYear","setSelectedYear","selectedSubject","setSelectedSubject","questionStep","setQuestionStep","findTest","list","displayed","randomInt","Math","floor","random","length","includes","id","push","renderTestCard","test","className","onClick","key","src","name","subject","Science","MathImg","English","title","userClicks","questions","style","display","newDisplayedTests","map","category","textAlign","num","year","filter","renderFeed","question","index","renderTestQuestion","newStep","renderTest","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.003afa0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/English.6409b912.png\";","module.exports = __webpack_public_path__ + \"static/media/Math.efafea32.png\";","module.exports = __webpack_public_path__ + \"static/media/Science.31c36b16.png\";","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport English from './images/English.png'\nimport MathImg from './images/Math.png'\nimport Science from './images/Science.png'\nimport sampleData from './tests.json'\n\nfunction App() {\n\n  const testSubjects = ['English', 'Math', 'Science']\n  const years = ['2017', '2018', '2019', '2020']\n  const categories = ['Trending', 'By Subject', 'By Year', 'Random']\n  \n  const [displayChunk, setDisplayChunk] = useState([0,1])\n  const [allTests, setAllTests] = useState(sampleData.allTests)\n  const [currentTest, setCurrentTest] = useState(null)\n  const [displayedTests, setDisplayedTests] = useState([])\n  const [selectedYear, setSelectedYear] = useState('2020')\n  const [selectedSubject, setSelectedSubject] = useState('English')\n  const [questionStep, setQuestionStep] = useState(5)\n  \n  const imageMatcher = name => {\n    if (name===\"Science\") return Science\n    else if (name===\"Math\") return MathImg\n    else return English\n  }\n\n  const exitTest = () => {\n    setCurrentTest(null)\n    setQuestionStep(5)\n  }\n\n  const findTest = (list, displayed) => {\n    \n    let randomInt\n\n    do {\n      randomInt = Math.floor(Math.random() * Math.floor(list.length))\n    } while (displayed.includes(list[randomInt].id))\n    \n    displayed.push(list[randomInt].id)\n    return list[randomInt]\n  }\n\n  const renderTestQuestion = question => {\n    return (\n      <div className=\"testQuestion\">\n        {question}\n      </div>\n    )\n  }\n\n  const renderTestCard = test => {\n    return (\n      <div className=\"column\">\n        <div className='ui card' onClick={() => setCurrentTest(test)}\n            key={test.id}>\n          <div className=\"ui image medium\">\n            <img src={imageMatcher(test.subject)}/>\n          </div>\n          <div className=\"content\">\n            <div className=\"header\">\n              {test.title}\n            </div>\n            <div className=\"description\">\n              This test has been viewed {test.userClicks} times\n            </div>\n          </div>\n          <div className=\"extra content\">\n            {test.questions.length} questions\n          </div>\n        </div>\n      </div>)\n  }\n\n  const renderTest = currentTest => {\n    if (!currentTest)\n      return\n    \n    return (\n      <div>\n        <div>\n          <h1>{currentTest.title}</h1>\n          <button className=\"ui massive fluid button orange\"\n            onClick={() => exitTest()}  \n          >\n            Go Back</button>\n        </div>\n        <div>\n          {currentTest.questions.map((question, index) => {\n            if (index < questionStep) {\n              return renderTestQuestion(question)\n            }\n          })}\n          <button className=\"ui massive fluid button green\"\n            onClick={() => {\n              let newStep = questionStep\n              setQuestionStep(newStep += 5)\n            }}\n          >Keep Going!</button>\n        </div>\n      </div>\n    )\n  }\n    //got hella returns here\n  const renderFeed = currentTest => {\n\n      if (currentTest)\n        return\n\n      let newDisplayedTests = []\n        \n      return categories.map((category) => {\n            \n        if (category === \"Trending\") {\n          return <div className=\"ui stackable two column divided grid\">\n              <div className=\"row\">\n                <div className=\"sixteen wide column\" style={{textAlign: \"center\"}}>\n                  <h1>{category}</h1>\n                </div>\n              </div>\n              <div className=\"row\">\n                {displayChunk.map(num => {\n                  newDisplayedTests.push(allTests[num].id)\n                  return renderTestCard(allTests[num])\n                })}</div>\n              </div>\n        } else if (category === \"Random\") {\n            return <div className=\"ui stackable two column divided grid\">\n                      <div className=\"row\">\n                        <div className=\"sixteen wide column\" style={{textAlign: \"center\"}}>\n                      <h1>{category}</h1>\n                    </div>\n                      </div>\n                      <div className=\"row\">\n                        {displayChunk.map(num => {\n                          return renderTestCard(findTest(allTests, newDisplayedTests))\n                        })}</div>\n                    </div>\n        } else if (category === \"By Year\") {\n            return <div className=\"ui stackable two column divided grid\">\n                      <div className=\"row\">\n                        <div className=\"sixteen wide column\" style={{textAlign: \"center\"}}>\n                          <h1>{category}</h1>\n                        </div>\n                      </div>\n                      <div className=\"row\">\n                        <div className=\"sixteen wide column\" id=\"optionsBar\">\n                          {years.map(year => {\n                            return <p onClick={()=> setSelectedYear(year)}\n                              className={year===selectedYear ? 'selectedOption' : ''}\n                              >\n                              {year}</p>\n                          })}\n                        </div>\n                      </div>\n                      <div className=\"row\">\n                        { displayChunk.map(num => {\n                          return renderTestCard(findTest(allTests.filter(test => test.year === selectedYear), newDisplayedTests))\n                      })}</div>\n                  </div>\n        } else {\n            return <div className=\"ui stackable two column divided grid\">\n                      <div className=\"row\">\n                        <div className=\"sixteen wide column\" style={{textAlign: \"center\"}}>\n                          <h1>{category}</h1>\n                        </div>\n                      </div>\n                      <div className=\"row\">\n                        <div className=\"sixteen wide column\" id=\"optionsBar\">\n                          {testSubjects.map(subject => {\n                            return <p onClick={()=> setSelectedSubject(subject)}\n                              className={subject===selectedSubject ? 'selectedOption' : ''}>\n                              {subject}</p>\n                          })}\n                        </div>\n                      </div>\n                      <div className=\"row\">\n                        { displayChunk.map(num => {\n                          return renderTestCard(findTest(allTests.filter(test => test.subject === selectedSubject), newDisplayedTests))\n                      })}</div>\n                  </div>\n            }\n        })\n        \n\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"ui text container\">\n        <div className='ui huge header'>\n          <p>Test Feed</p>\n        </div>\n        <div className='ui medium header'\n          style={{display: !currentTest ? 'block': 'none'}}\n        >\n          <p>Click on a test to view!</p>\n        </div>\n        {renderFeed(currentTest)}\n        {renderTest(currentTest)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}