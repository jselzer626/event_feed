{"version":3,"sources":["images/English.png","images/Math.png","images/Science.png","App.js","index.js"],"names":["module","exports","App","testSubjects","years","categories","useState","Trending","Random","bySubject","byYear","displayChunk","setDisplayChunk","sampleData","allTests","currentTest","setCurrentTest","selectedYear","setSelectedYear","selectedSubject","setSelectedSubject","questionStep","setQuestionStep","findTest","list","displayed","randomInt","Math","floor","random","length","includes","id","push","loadMoreContent","category","categoryClean","newDisplay","i","renderTestCard","test","className","onClick","key","src","name","subject","Science","MathImg","English","title","userClicks","questions","style","display","newDisplayedTests","map","textAlign","num","index","year","filter","renderFeed","question","renderTestQuestion","newStep","renderTest","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8c8a8f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/English.6409b912.png\";","module.exports = __webpack_public_path__ + \"static/media/Math.efafea32.png\";","module.exports = __webpack_public_path__ + \"static/media/Science.31c36b16.png\";","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport English from './images/English.png'\nimport MathImg from './images/Math.png'\nimport Science from './images/Science.png'\nimport sampleData from './tests.json'\n\nfunction App() {\n\n  const testSubjects = ['English', 'Math', 'Science']\n  const years = ['2017', '2018', '2019', '2020']\n  const categories = ['Trending', 'By Subject', 'By Year', 'Random']\n  \n  const [displayChunk, setDisplayChunk] = useState({Trending: [0,0], Random: [0,0], bySubject: [0,0], byYear: [0,0]})\n  const [allTests, setAllTests] = useState(sampleData.allTests)\n  const [currentTest, setCurrentTest] = useState(null)\n  const [displayedTests, setDisplayedTests] = useState([])\n  const [selectedYear, setSelectedYear] = useState('2020')\n  const [selectedSubject, setSelectedSubject] = useState('English')\n  const [questionStep, setQuestionStep] = useState(5)\n  \n  const imageMatcher = name => {\n    if (name===\"Science\") return Science\n    else if (name===\"Math\") return MathImg\n    else return English\n  }\n\n  const exitTest = () => {\n    setCurrentTest(null)\n    setQuestionStep(5)\n  }\n\n  const findTest = (list, displayed) => {\n    \n    let randomInt\n\n    do {\n      randomInt = Math.floor(Math.random() * Math.floor(list.length))\n    } while (displayed.includes(list[randomInt].id))\n    \n    displayed.push(list[randomInt].id)\n    return list[randomInt]\n  }\n\n  const renderTestQuestion = question => {\n    return (\n      <div className=\"testQuestion\">\n        {question}\n      </div>\n    )\n  }\n\n  const loadMoreContent = category => {\n    let categoryClean = category\n    if (category == \"By Subject\")\n      categoryClean = 'bySubject'\n    else if (category === \"By Year\")\n      categoryClean = 'byYear'\n    \n    let newDisplay = displayChunk[`${categoryClean}`]\n    for (let i = 0; i < 2; i++) {\n      newDisplay.push(0)\n    }\n    setDisplayChunk({...displayChunk, categoryClean:newDisplay})\n    \n  }\n\n  const renderTestCard = test => {\n    return (\n      <div className=\"column\">\n        <div className='ui card' onClick={() => setCurrentTest(test)}\n            key={test.id}>\n          <div className=\"ui image medium\">\n            <img src={imageMatcher(test.subject)}/>\n          </div>\n          <div className=\"content\">\n            <div className=\"header\">\n              {test.title}\n            </div>\n            <div className=\"description\">\n              This test has been viewed {test.userClicks} times\n            </div>\n          </div>\n          <div className=\"extra content\">\n            {test.questions.length} questions\n          </div>\n        </div>\n      </div>)\n  }\n\n  const renderTest = currentTest => {\n    if (!currentTest)\n      return\n    \n    return (\n      <div>\n        <div>\n          <h1>{currentTest.title}</h1>\n          <button className=\"ui massive fluid button orange\"\n            onClick={() => exitTest()}  \n          >\n            Go Back</button>\n        </div>\n        <div>\n          {currentTest.questions.map((question, index) => {\n            if (index < questionStep) {\n              return renderTestQuestion(question)\n            }\n          })}\n          <button className=\"ui massive fluid button green\"\n            onClick={() => {\n              let newStep = questionStep\n              setQuestionStep(newStep += 5)\n            }}\n          >Keep Going!</button>\n        </div>\n      </div>\n    )\n  }\n    //got hella returns here\n  const renderFeed = currentTest => {\n\n      if (currentTest)\n        return\n\n      let newDisplayedTests = []\n        \n      return categories.map((category) => {\n            \n        if (category === \"Trending\") {\n          return <div className=\"ui stackable two column divided grid\">\n              <div className=\"row\">\n                <div className=\"sixteen wide column\" style={{textAlign: \"center\"}}>\n                  <h1>{category}</h1>\n                </div>\n              </div>\n              <div className=\"row\">\n                {displayChunk.Trending.map((num, index) => {\n                  newDisplayedTests.push(allTests[index].id)\n                  return renderTestCard(allTests[index])\n                })}</div>\n                <button\n                      className=\"ui button massive fluid green\"\n                      onClick={() => loadMoreContent(category)}\n                      > Load More {category} Tests\n                </button> \n              </div>\n        } else if (category === \"Random\") {\n            return <div className=\"ui stackable two column divided grid\">\n                      <div className=\"row\">\n                        <div className=\"sixteen wide column\" style={{textAlign: \"center\"}}>\n                      <h1>{category}</h1>\n                    </div>\n                      </div>\n                      <div className=\"row\">\n                        {displayChunk.Random.map(num => {\n                          return renderTestCard(findTest(allTests, newDisplayedTests))\n                        })}</div>\n                        <button\n                          className=\"ui button massive fluid green\"\n                          onClick={() => loadMoreContent(category)}\n                          > Load More {category} Tests\n                        </button>\n                    </div>\n        } else if (category === \"By Year\") {\n            return <div className=\"ui stackable two column divided grid\">\n                      <div className=\"row\">\n                        <div className=\"sixteen wide column\" style={{textAlign: \"center\"}}>\n                          <h1>{category}</h1>\n                        </div>\n                      </div>\n                      <div className=\"row\">\n                        <div className=\"sixteen wide column\" id=\"optionsBar\">\n                          {years.map(year => {\n                            return <p onClick={()=> setSelectedYear(year)}\n                              className={year===selectedYear ? 'selectedOption' : ''}\n                              >\n                              {year}</p>\n                          })}\n                        </div>\n                      </div>\n                      <div className=\"row\">\n                        { displayChunk.byYear.map(num => {\n                          return renderTestCard(findTest(allTests.filter(test => test.year === selectedYear), newDisplayedTests))\n                      })}</div>\n                      <button\n                        className=\"ui button massive fluid green\"\n                        onClick={() => loadMoreContent(category)}\n                        > Load More {selectedYear} Tests\n                      </button>\n                  </div>\n        } else {\n            return <div className=\"ui stackable two column divided grid\">\n                      <div className=\"row\">\n                        <div className=\"sixteen wide column\" style={{textAlign: \"center\"}}>\n                          <h1>{category}</h1>\n                        </div>\n                      </div>\n                      <div className=\"row\">\n                        <div className=\"sixteen wide column\" id=\"optionsBar\">\n                          {testSubjects.map(subject => {\n                            return <p onClick={()=> setSelectedSubject(subject)}\n                              className={subject===selectedSubject ? 'selectedOption' : ''}>\n                              {subject}</p>\n                          })}\n                        </div>\n                      </div>\n                      <div className=\"row\">\n                        { displayChunk.bySubject.map(num => {\n                          return renderTestCard(findTest(allTests.filter(test => test.subject === selectedSubject), newDisplayedTests))\n                      })}</div>\n                      <button\n                        className=\"ui button massive fluid green\"\n                        onClick={() => loadMoreContent(category)}\n                        > Load More {selectedSubject} Tests\n                      </button>\n                  </div>\n            }\n        })\n        \n\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"ui text container\">\n        <div className='ui huge header'>\n          <p>Test Feed</p>\n        </div>\n        <div className='ui medium header'\n          style={{display: !currentTest ? 'block': 'none'}}\n        >\n          <p>Click on a test to view!</p>\n        </div>\n        {renderFeed(currentTest)}\n        {renderTest(currentTest)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}